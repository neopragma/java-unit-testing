package com.neopragma.rpn;

import com.pholser.junit.quickcheck.generator.java.lang.DoubleGenerator;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

@RunWith(JUnitQuickcheck.class)
public class RPNQuickCheckTest {

    private static final int TEST_CASES = 100;

    @Test
    void additionWorksForGeneratedDoubles() {
        DoubleGenerator generator = new DoubleGenerator();
        RPN rpn = new RPN();

        for (int i = 0; i < TEST_CASES; i++) {
            double a = generator.generate(null, null);
            double b = generator.generate(null, null);

            rpn = new RPN();
            rpn.enter(String.valueOf(a));
            rpn.enter(String.valueOf(b));
            String result = rpn.enter("+");

            double actual = Double.parseDouble(result);
            double expected = a + b;
            assertEquals(expected, actual, 1e-9, "Sum should match expected result");
        }
    }

    @Test
    void divisionAvoidsDivideByZero() {
        DoubleGenerator generator = new DoubleGenerator();
        RPN rpn = new RPN();

        for (int i = 0; i < TEST_CASES; i++) {
            double a = generator.generate(null, null);
            double b;
            do {
                b = generator.generate(null, null);
            } while (Math.abs(b) < 1e-9); // avoid divide-by-zero

            rpn = new RPN();
            rpn.enter(String.valueOf(a));
            rpn.enter(String.valueOf(b));
            String result = rpn.enter("/");

            double actual = Double.parseDouble(result);
            double expected = a / b;
            assertEquals(expected, actual, 1e-9, "Division result should match expected value");
        }
    }

    @Test
    void invalidInputsThrowIllegalArgument() {
        String[] invalidInputs = {"@", "foo", "x1", "+++", "abc", "!"};
        RPN rpn = new RPN();

        for (String input : invalidInputs) {
            IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> rpn.enter(input));
            assertTrue(ex.getMessage().contains("Unrecognized input value"));
        }
    }

    @Test
    void clearCommandResetsStack() {
        RPN rpn = new RPN();
        rpn.enter("123.45");
        String result = rpn.enter("c");
        assertEquals("0.0", result, "Stack should reset to 0.0 after clear command");
    }
}
